<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.itsmart.profileMnt.dao.ProfileDAO">
    <!-- mybatis : https://mybatis.org/mybatis-3/ko/sqlmap-xml.html#result-maps -->
    <resultMap id="UsrProfileInfo" type="ProfileVO">
        <id property="user_id" column="USER_ID"/>
        <result property="user_nm" column="USER_NM"/>
        <result property="user_position" column="USER_POSITION"/>
        <result property="user_position_nm" column="USER_POSITION_NM"/>
        <result property="user_birth" column="USER_BIRTH"/>
        <result property="user_department" column="USER_DEPARTMENT"/>
        <result property="user_department_nm" column="USER_DEPARTMENT_NM"/>
        <result property="hire_date" column="HIRE_DATE"/>
        <result property="user_phone" column="USER_PHONE"/>
        <result property="user_address" column="USER_ADDRESS"/>
        <association column="user_id" property="fileInfo" javaType="FileVO">
            <result property="file_seq" column="FILE_SEQ"/>
            <result property="file_ori_nm" column="FILE_ORI_NM"/>
            <result property="file_sver_nm" column="FILE_SVER_NM"/>
            <result property="file_sver_path" column="FILE_SVER_PATH"/>
            <result property="file_extension" column="FILE_EXTENSION"/>
        </association>
        <collection column="user_id" property="educationList" javaType="List" ofType="EduVO"
                    select="selectUsrEducationList">
            <result property="school_seq" column="SCHOOL_SEQ"/>
            <result property="school_gubun" column="SCHOOL_GUBUN"/>
            <result property="school_nm" column="SCHOOL_NM"/>
            <result property="school_start_date" column="SCHOOL_START_DATE"/>
            <result property="school_end_date" column="SCHOOL_END_DATE"/>
            <result property="major" column="MAJOR"/>
            <result property="double_major" column="DOUBLE_MAJOR"/>
            <result property="total_grade" column="TOTAL_GRADE"/>
            <result property="standard_grade" column="STANDARD_GRADE"/>
            <result property="grad_status" column="GRAD_STATUS"/>
        </collection>
        <collection column="user_id" property="projectList" javaType="List" ofType="ProjectVO"
                    select="selectUsrProjectList">
            <result property="project_seq" column="PROJECT_SEQ"/>
            <result property="project_nm" column="PROJECT_NM"/>
            <result property="project_start_date" column="PROJECT_START_DATE"/>
            <result property="project_end_date" column="PROJECT_END_DATE"/>
            <result property="project_role" column="PROJECT_ROLE"/>
            <result property="project_client" column="PROJECT_CLIENT"/>
            <result property="assigned_task_lar_nm" column="ASSIGNED_TASK_LAR_NM"/>
            <result property="assigned_task_lar" column="ASSIGNED_TASK_LAR"/>
            <result property="assigned_task_mid_nm" column="ASSIGNED_TASK_MID_NM"/>
            <result property="assigned_task_mid" column="ASSIGNED_TASK_MID"/>
        </collection>
        <collection column="user_id" property="qualificationList" javaType="List" ofType="QualificationVO"
                    select="selectUsrQualificationList">
            <result property="qualification_seq" column="QUALIFICATION_SEQ"/>
            <result property="qualification_nm" column="QUALIFICATION_NM"/>
            <result property="issuer" column="ISSUER"/>
            <result property="acquisition_date" column="ACQUISITION_DATE"/>
            <result property="expiry_date" column="EXPIRY_DATE"/>
        </collection>
        <collection column="user_id" property="workExperienceList" javaType="List" ofType="WorkExperienceVO"
                    select="selectUsrWorkList">
            <result property="work_seq" column="WORK_SEQ"/>
            <result property="work_place" column="WORK_PLACE"/>
            <result property="work_assigned_task" column="WORK_ASSIGNED_TASK"/>
            <result property="work_position" column="WORK_POSITION"/>
            <result property="work_start_date" column="WORK_START_DATE"/>
            <result property="word_end_date" column="WORD_END_DATE"/>
        </collection>
    </resultMap>

    <select id="selectUsrProfileDetail" parameterType="String" resultMap="UsrProfileInfo">
        <![CDATA[
        SELECT
            /* 인적사항 */
            PF.USER_ID                           AS USER_ID,
            PF.USER_NM                           AS USER_NM,
            PF.USER_POSITION                     AS USER_POSITION,
            (SELECT CODE_VALUE
             FROM TB_COMMON_CODE
             WHERE CODE_GROUP_ID = 'PSIT'
               AND CODE_ID = PF.USER_POSITION)   AS USER_POSITION_NM,
            PF.USER_BIRTH                        AS USER_BIRTH,
            PF.USER_DEPARTMENT                   AS USER_DEPARTMENT,
            (SELECT CODE_VALUE
             FROM TB_COMMON_CODE
             WHERE CODE_GROUP_ID = 'ORG'
               AND CODE_ID = PF.USER_DEPARTMENT) AS USER_DEPARTMENT_NM,
            PF.HIRE_DATE                         AS HIRE_DATE,
            PF.USER_PHONE                        AS USER_PHONE,
            PF.USER_ADDRESS                      AS USER_ADDRESS,

            /* 파일 */
            AT.FILE_ORI_NM                       AS FILE_ORI_NM,
            AT.FILE_SVER_NM                      AS FILE_SVER_NM,
            AT.FILE_SVER_PATH                    AS FILE_SVER_PATH,
            AT.FILE_EXTENSION                    AS FILE_EXTENSION

        FROM TB_USER_PROFILE_INFO PF
                 LEFT JOIN TB_ATTACHMENT_INFO AT
                           ON PF.USER_ID = AT.USER_ID AND PF.FILE_SEQ = AT.FILE_SEQ AND AT.USE_YN = 'Y'
        WHERE PF.USER_ID = #{user_id}
          AND PF.USE_YN = 'Y'
        ]]>
    </select>

    <!-- profile + educationList -->
    <select id="selectUsrEducationList" resultType="EduVO">
        SELECT SCHOOL_GUBUN,
               SCHOOL_NM,
               SCHOOL_START_DATE,
               SCHOOL_END_DATE,
               MAJOR,
               DOUBLE_MAJOR,
               TOTAL_GRADE,
               STANDARD_GRADE,
               GRAD_STATUS
        FROM TB_USER_EDUCATION_INFO
        WHERE USER_ID = #{user_id}
    </select>

    <!-- profile + projectList -->
    <select id="selectUsrProjectList" resultType="projectVO">
        SELECT PROJECT_SEQ,
               PROJECT_NM,
               PROJECT_START_DATE,
               PROJECT_END_DATE,
               PROJECT_ROLE,
               (SELECT CODE_VALUE
                FROM TB_COMMON_CODE
                WHERE CODE_GROUP_ID = 'ROLE'
                  AND CODE_ID = PJ.PROJECT_ROLE)      AS PROJECT_ROLE_NM,
               PROJECT_CLIENT,
               ASSIGNED_TASK_LAR,
               ASSIGNED_TASK_MID,
               (SELECT CODE_VALUE
                FROM TB_COMMON_CODE
                WHERE CODE_GROUP_ID = 'TASK'
                  AND CODE_ID = PJ.ASSIGNED_TASK_LAR) AS ASSIGNED_TASK_LAR_NM,
               (SELECT CODE_VALUE
                FROM TB_COMMON_CODE
                WHERE CODE_GROUP_ID = 'TASK'
                  AND CODE_ID = PJ.ASSIGNED_TASK_MID) AS ASSIGNED_TASK_MID_NM
        FROM TB_PROJECT_INFO PJ
        WHERE USER_ID = #{user_id}
          AND USE_YN = 'Y'
    </select>

    <!-- profile + qualificationList -->
    <select id="selectUsrQualificationList" resultType="qualificationVO">
        SELECT QUALIFICATION_SEQ,
               QUALIFICATION_NM,
               ISSUER,
               ACQUISITION_DATE,
               EXPIRY_DATE
        FROM TB_USER_QUALIFICATION_INFO
        WHERE USER_ID = #{user_id}
          AND USE_YN = 'Y'
    </select>

    <!-- profile + workExperienceList -->
    <select id="selectUsrWorkList" resultType="workExperienceVO">
        SELECT WORK_SEQ,
               WORK_PLACE,
               WORK_ASSIGNED_TASK,
               WORK_POSITION,
               WORK_START_DATE,
               WORK_END_DATE
        FROM TB_WORK_EXPERIENCE_INFO
        WHERE USER_ID = #{user_id}
          AND USE_YN = 'Y'
    </select>

    <!--updateUsrProfileInfo : 직원 프로필 정보 테이블 UPDATE-->
    <update id="updateUsrProfileInfo" parameterType="profileVO">
        UPDATE TB_USER_PROFILE_INFO
        SET USER_POSITION   = #{user_position},
            USER_BIRTH      = #{user_birth},
            USER_DEPARTMENT = #{user_department},
            USER_PHONE      = #{user_phone},
            USER_ADDRESS    = #{user_address},
            FILE_SEQ        = (SELECT COALESCE(MAX(FILE_SEQ), 0)
                               FROM TB_ATTACHMENT_INFO
                               WHERE USER_ID = #{user_id}
                                 AND USE_YN = 'Y'),
            MODIFIED_DATE   = now(),
            MODIFIER        = #{user_id}
        WHERE USER_ID = #{user_id}
          AND USE_YN = 'Y'
    </update>

    <!--updateUsrEducationInfo : 직원 학력 정보테이블 INSERT-->
    <insert id="updateUsrEducationInfo" parameterType="EduVO">
        INSERT INTO TB_USER_EDUCATION_INFO(user_id, school_seq, school_gubun, school_nm, school_start_date,
                                           school_end_date, major, total_grade,
                                           grad_status, created_date, modified_date, creator, modifier)
        VALUES (#{user_id},
                #{school_seq},
                #{school_gubun},
                #{school_nm},
                #{school_start_date},
                #{school_end_date},
                #{major},
                #{total_grade},
                #{grad_status},
                now(),
                now(),
                #{user_id},
                #{user_id})
    </insert>

    <!-- insertUsrProfileInfoHist : 직원 프로필 정보 이력 테이블 INSERT -->
    <insert id="insertUsrProfileInfoHist" parameterType="profileVO">
        INSERT INTO TB_USER_PROFILE_INFO_HIST(USER_ID, HIST_SEQ, USER_NM, USER_POSITION, USER_BIRTH, USER_DEPARTMENT,
                                              HIRE_DATE, USER_PHONE, USER_ADDRESS, FILE_SEQ, CREATED_DATE, CREATOR)
        SELECT USER_ID,
               #{hist_seq},
               USER_NM,
               USER_POSITION,
               USER_BIRTH,
               USER_DEPARTMENT,
               HIRE_DATE,
               USER_PHONE,
               USER_ADDRESS,
               FILE_SEQ,
               now(),
               #{user_id}
        FROM TB_USER_PROFILE_INFO
        WHERE USER_ID = #{user_id}
          AND USE_YN = 'Y'
    </insert>


    <!-- insertUsrEducationInfoHist : 직원 학력 정보 이력 테이블 INSERT -->
    <insert id="insertUsrEducationInfoHist" parameterType="EduVO">
        INSERT INTO TB_USER_EDUCATION_INFO_HIST(USER_ID, SCHOOL_SEQ, HIST_SEQ, SCHOOL_GUBUN, SCHOOL_NM,
                                                SCHOOL_START_DATE,
                                                SCHOOL_END_DATE, MAJOR, DOUBLE_MAJOR, TOTAL_GRADE, STANDARD_GRADE,
                                                GRAD_STATUS, CREATED_DATE, CREATOR)
        SELECT USER_ID,
               SCHOOL_SEQ,
               #{hist_seq},
               SCHOOL_GUBUN,
               SCHOOL_NM,
               SCHOOL_START_DATE,
               SCHOOL_END_DATE,
               MAJOR,
               DOUBLE_MAJOR,
               TOTAL_GRADE,
               STANDARD_GRADE,
               GRAD_STATUS,
               now(),
               #{user_id}
        FROM TB_USER_EDUCATION_INFO
        WHERE SCHOOL_SEQ = #{school_seq}
          AND USER_ID = #{user_id}
    </insert>

    <!-- getUsrProfileInfoList : 직원 프로필 정보 목록 SELECT -->
    <select id="getUsrProfileInfoList" parameterType="ProfileVO" resultType="ProfileVO">
        select lpad(row_number() over (), 3, 0) as idx,
        (SELECT calculate_total_months_v2(TB.user_id)) AS project_totalMonth,
        TB.*
        from (select pf.user_id,
        pf.user_nm,
        pf.created_date,
        cd.code_value as user_department_nm,
        pj.project_nm,
        pj.project_start_date,
        pj.project_end_date,
        pj.project_client,
        exists(
        select 1
        from TB_USER_QUALIFICATION_INFO ql
        where pf.user_id = ql.user_id
        and trim(ql.qualification_nm) = '정보처리기사'
        ) as qualification_yn,
        row_number() over (partition by pf.user_id order by pj.project_start_date desc) as no
        from TB_USER_PROFILE_INFO pf
        left join (select user_id,
        project_nm,
        project_start_date,
        project_end_date,
        project_client
        from TB_PROJECT_INFO
        where project_end_date > now()
        ) pj
        on pf.user_id = pj.user_id
        join (select code_id,
        code_value
        from TB_COMMON_CODE a
        where a.code_group_id = 'ORG') cd
        on pf.user_department = cd.code_id
        <if test="searchText != ''">
            <choose>
                <when test="searchType == 'userNm'">
                    where pf.user_nm like concat('%', #{searchText}, '%')
                </when>
                <when test="searchType == 'userId'">
                    where pf.user_id like concat('%', #{searchText}, '%')
                </when>
                <otherwise>
                    where cd.code_value like concat('%', #{searchText}, '%')
                </otherwise>
            </choose>
        </if>
        AND pf.use_yn = 'Y'
        ) TB
        where TB.no = 1
        order by created_date
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- getUsrProfileInfoCnt : 직원 프로필 정보 목록 건수 SELECT-->
    <select id="getUsrProfileInfoCnt" parameterType="ProfileVO" resultType="int">
        SELECT COUNT(*) AS cnt
        FROM TB_USER_PROFILE_INFO PF
        JOIN TB_COMMON_CODE CD
        ON PF.USER_DEPARTMENT = CD.CODE_ID
        WHERE CD.CODE_GROUP_ID = 'ORG'
        AND PF.use_yn = 'Y'
        <if test="searchText != ''">
            <choose>
                <when test="searchType == 'userNm'">
                    AND PF.USER_NM LIKE CONCAT('%', #{searchText}, '%')
                </when>
                <when test="searchType == 'userId'">
                    AND PF.USER_ID LIKE CONCAT('%', #{searchText}, '%')
                </when>
                <otherwise>
                    AND CD.CODE_VALUE LIKE CONCAT('%', #{searchText}, '%')
                </otherwise>
            </choose>
        </if>
    </select>

    <!-- checkUsrExists : USER_ID 중복체크 -->
    <select id="checkUsrExists" parameterType="string" resultType="boolean">
        SELECT (EXISTS(SELECT 1
                       FROM TB_USER_PROFILE_INFO
                       WHERE USER_ID = #{user_id}))
    </select>

    <!-- insertUsrProfile : 신규 직원 프로필 등록  -->
    <insert id="insertUsrProfile" parameterType="profileVO">
        INSERT INTO TB_USER_PROFILE_INFO(user_id, user_pw, user_nm, user_position, user_birth, user_department,
                                         hire_date, user_phone, user_address, file_seq, created_date, modified_date,
                                         creator, modifier)
        VALUES (#{user_id},
                #{user_pw},
                #{user_nm},
                #{user_position},
                #{user_birth},
                #{user_department},
                #{hire_date},
                #{user_phone},
                #{user_address},
                (SELECT COALESCE(MAX(FILE_SEQ), 0)
                 FROM TB_ATTACHMENT_INFO
                 WHERE USER_ID = #{user_id}
                   AND USE_YN = 'Y'),
                now(),
                now(),
                #{user_id},
                #{user_id})
    </insert>

    <!-- getUsrProfileNotPagingInfoList : 직원 목록 전체 SELECT -->
    <select id="getUsrProfileNotPagingInfoList" parameterType="ProfileVO" resultType="ProfileVO">
        select (SELECT calculate_total_months_v2(TB.user_id)) AS project_totalMonth, TB.*
        from (select pf.user_id,
                     pf.user_nm,
                     pf.created_date,
                     cd.code_value                                                                   as user_department_nm,
                     pj.project_nm,
                     pj.project_start_date,
                     pj.project_end_date,
                     pj.project_client,
                     exists(select 1
                            from TB_USER_QUALIFICATION_INFO ql
                            where pf.user_id = ql.user_id
                              and trim(ql.qualification_nm) = '정보처리기사')                              as qualification_yn,
                     row_number() over (partition by pf.user_id order by pj.project_start_date desc) as no
              from TB_USER_PROFILE_INFO pf
                       left join (select user_id,
                                         project_nm,
                                         project_start_date,
                                         project_end_date,
                                         project_client
                                  from TB_PROJECT_INFO
                                  where project_end_date > now()) pj
                                 on pf.user_id = pj.user_id
                       join (select code_id,
                                    code_value
                             from TB_COMMON_CODE a
                             where a.code_group_id = 'ORG') cd
                            on pf.user_department = cd.code_id
                                AND pf.use_yn = 'Y') TB
        where TB.no = 1
        order by created_date
    </select>
</mapper>
